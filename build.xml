<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="build" default="all">

	<property name="src.base" value="${basedir}/src/" />
    <property name="src.path" value="${src.base}/jhv/src/:${src.base}/base/src/::${src.base}/basegui/src/:${src.base}/viewmodel/src/:${src.base}/viewmodelplugin/src/" />
    <property name="bin.eclipse" value="${src.base}/jhv/bin/ ${src.base}/base/bin/ ${src.base}/viewmodel/bin/ ${src.base}/viewmodelplugin/bin/" />
    <property name="doc" value="${basedir}/doc/" />
    <property name="bin" value="${basedir}/bin/" />
    <property name="bin.jhv" value="${bin}/jhv" />
    <property name="resources" value="${basedir}/resources/" />
    <property name="lib" value="${basedir}/lib/" />
    <property name="build" value="${basedir}/build/" />
    <property name="build.resources" value="${basedir}/build-resources/" />
    <property name="temp" value="${basedir}/temp/" />

    <property name="bzrpath" value="bzr" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${build.resources}/shared/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>
	<taskdef name="jarbundler" 
			classname="net.sourceforge.jarbundler.JarBundler">
		<classpath path="${build.resources}/mac/lib/jarbundler.jar"/>
	</taskdef>

	<target name="mkdir">
        <mkdir dir="${bin}" /> 
        <mkdir dir="${bin.jhv}" /> 
        <mkdir dir="${build}" /> 
        <mkdir dir="${temp}" /> 
        <mkdir dir="${doc}" /> 
	</target>
	
   	<target name="clean" depends="mkdir">
        <delete file="JHelioviewer.jar"/> 
        <delete includeemptydirs="true" verbose="true">
        	<fileset dir="${bin}" followsymlinks="false" defaultexcludes="no"/>
        </delete> 
        <delete includeemptydirs="true" verbose="true">
        	<fileset dir="${build}" followsymlinks="false" defaultexcludes="no"/>
        </delete> 
        <delete includeemptydirs="true" verbose="true">
        	<fileset dir="${temp}" followsymlinks="false" defaultexcludes="no"/>
        </delete> 
        <delete includeemptydirs="true" verbose="true">
        	<fileset dir="${doc}" followsymlinks="false" defaultexcludes="no"/>
        </delete> 
        <delete includeemptydirs="true" verbose="true">
        	<fileset dir="${src.base}" includes="${bin.eclipse}"  followsymlinks="false" defaultexcludes="no"/>
        </delete> 
        <antcall target="mkdir" />
	</target>

	<target name="all" depends="sign" />

    <!-- JAR file generation -->

    <target name="init" depends="mkdir">
       	<echo message="Trying to determine revision" />
        <exec 
            executable="${bzrpath}" 
            outputproperty="jhv.revision.tmp" 
            resolveexecutable="true" 
            searchpath="true" 
            resultproperty="jhv.revision.retcode"
            failifexecutionfails="false">
                <arg value="revno"/>
        </exec>
        <loadfile property="jhv.version" srcFile="VERSION" />
        <property name="jhv.version" value="2.0.0" />
        <if>
            <equals arg1="${jhv.revision.retcode}" arg2="0"/>
            <then>
                <property name="jhv.revision" value="${jhv.revision.tmp}" />
            </then>
            <else>
                <property name="jhv.revision" value="0" />
            </else>
        </if>
    </target>

    <target name="build-init" depends="init">
        <property name="jhv.pkg.name" value="jhv-${jhv.version}.${jhv.revision}" />
    </target>
	
	<target name="compile" depends="init" >
		<javac srcdir="${src.path}" destdir="${bin.jhv}" target="1.5" source="1.5" debug="on" debuglevel="source,lines,vars" includeantruntime="false">
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
            <exclude name="**/JavaHelioViewerLauncher.java"/>
 		</javac>
		<!-- Copy, remove the suppress warning and compile-->
		<mkdir dir="${temp}/src/org/helioviewer/jhv"/>
		<copy 
            file="${src.base}/jhv/src/org/helioviewer/jhv/JavaHelioViewerLauncher.java" 
            tofile="${temp}/src/org/helioviewer/jhv/JavaHelioViewerLauncher.java"
        />
		<replace file="${temp}/src/org/helioviewer/jhv/JavaHelioViewerLauncher.java" token='@SuppressWarnings("all")'/>
		<javac destdir="${bin.jhv}" target="1.2" source="1.2" debug="true" debuglevel="source,lines,vars" includeantruntime="false">
			<src path="${temp}/src/org/helioviewer/jhv/" />
            <include name="JavaHelioViewerLauncher.java"/>
		</javac>
    </target>
	
	<target name="jar-bundle" depends="compile">
		<!-- JAR File -->
 		<jar destfile="JHelioviewer.jar">
			<manifest>
				<attribute name="Main-Class" value="org.helioviewer.jhv.JavaHelioViewerLauncher" />
				<attribute name="Class-Path" value="." />
                <attribute name="Implementation-Version" value="v${jhv.version}r${jhv.revision}" />
                <attribute name="version" value="${jhv.version}" />
                <attribute name="revision" value="${jhv.revision}" />
			</manifest>
            <fileset dir="${bin.jhv}" />
            <fileset dir="${resources}" />
            <fileset file="README" />
            <fileset file="COPYING" />
	        <zipgroupfileset dir="${lib}" includes="**/*.jar"/>
 		</jar>
        <copy file="JHelioviewer.jar" tofile="${build}/JHelioviewer.jar" />
	</target>

	<target name="sign" depends="jar-bundle" if="sign.jar">
		<!-- Use "keytool -genkey -alias signFile -keystore myKeystore"
			to generate keystore -->
		<input message="keystore to sign jar file:"
			addproperty="sign.keystore">
		</input>
		<input message="keystore password to sign jar file:"
			addproperty="sign.storepass">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler"/>
		</input>
		<input message="alias to sign jar file:"
			addproperty="sign.alias">
		</input>
		<input message="private key password to sign jar file:"
			addproperty="sign.keypass">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler"/>
		</input>
		<signjar jar="JHelioviewer.jar"
			alias="${sign.alias}"
			keypass="${sign.keypass}"
			keystore="${sign.keystore}"
			storepass="${sign.storepass}"/>
	</target>


    <!-- Mac OS bundle -->

	<target name="release-mac" depends="sign, bundle-mac"/>
    
    <target name="bundle-mac" depends="build-init">
        <if>
            <contains string="${os.name}" substring="mac" casesensitive="false"/>
            <then>
                <exec executable="chmod" dir="${build.resources}/mac" >
                    <arg value="u+x" />
                    <arg value="bundle.sh" />
                </exec>
                <mkdir dir="${temp}/build/mac/" />
                <jarbundler dir="${temp}/build/mac/"
                    name="JHelioviewer"
                    mainclass="org.helioviewer.jhv.JavaHelioViewerLauncher"
                    jar="${build}/JHelioviewer.jar"
                    version="${jhv.version}"
                    build="${jhv.revision}"
                    bundleid="org.helioviewer.jhv"
                    icon="${build.resources}/mac/JHV_icon.icns">
                    <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
                </jarbundler>
                <exec executable="${build.resources}/mac/bundle.sh">
                	<env key="TEMP" value="${temp}/build/mac" />
                	<env key="RESOURCES" value="${build.resources}/mac" />
                	<env key="BUILD" value="${build}" />
                	<env key="NAME" value="${jhv.pkg.name}" />
                	<env key="README" value="README" />
                	<env key="COPYING" value="COPYING" />
                	<env key="VERSION" value="VERSION" />
                </exec>
            </then>
            <else>
                <echo> Cannot build MacOS dmg file under ${os.name}.</echo>
            </else>
        </if>
	</target>

    <!-- Windows setup -->
    <taskdef name="nsis" classname="net.sf.nsisant.Task">
        <classpath location="${build.resources}/windows/nsisant-1.2.jar"/>
    </taskdef>
    <property name="nsis.path" value="${temp}/build/windows/nsis-2.46/" />
    
    <target name="init-nsis" depends="build-init">
        <untar src="${build.resources}/windows/nsis-2.46.tar.bz2" dest="${temp}/build/windows" overwrite="false" compression="bzip2"/>
        <if>
            <contains string="${os.name}" substring="linux" casesensitive="false"/>
            <then>
                <property name="makensis.executable" value="makensis-linux"/>
                <property name="nsis.argument.prefix" value="-"/>
            </then>
            <elseif>
                <and>
                    <contains string="${os.name}" substring="mac" casesensitive="false"/>
                    <contains string="${os.arch}" substring="ppc" casesensitive="false"/>
                </and>
                <then>
	                <property name="makensis.executable" value="makensis-mac-ppc"/>
	                <property name="nsis.argument.prefix" value="-"/>
                </then>
            </elseif>
            <elseif>
                <and>
                    <contains string="${os.name}" substring="mac" casesensitive="false"/>
                </and>
                <then>
	                <property name="makensis.executable" value="makensis-mac-x86"/>
	                <property name="nsis.argument.prefix" value="-"/>
                </then>
            </elseif>
            <else>
	            <property name="makensis.executable" value="makensis.exe"/>
                <property name="nsis.argument.prefix" value="/"/>
            </else>            		
        </if>
        <if>
            <not>
                <contains string="${os.name}" substring="windows" casesensitive="false"/>
            </not>
            <then>
                <exec executable="chmod" dir="${nsis.path}" >
                    <arg value="u+x" />
                    <arg value="${makensis.executable}" />
                </exec>
            </then>
        </if>
    </target>
    
    <target name="release-windows" depends="sign,bundle-windows"/>
 

	<target name="bundle-windows" depends="init-nsis">
		<exec executable="${nsis.path}/${makensis.executable}" dir="${nsis.path}">
            <arg value="${nsis.argument.prefix}DJHV_VERSION=${jhv.version}" />
            <arg value="${nsis.argument.prefix}DJHV_REVISION=${jhv.revision}" />
            <arg value="${nsis.argument.prefix}DRESOURCE_PATH=${build.resources}/windows" />
            <arg value="${nsis.argument.prefix}DBUILD_PATH=${build}" />
            <arg value="${nsis.argument.prefix}DFILE_NAME=${jhv.pkg.name}" />
            <arg value="${nsis.argument.prefix}DREADME_FILE=${basedir}/README" />
            <arg value="${nsis.argument.prefix}DCOPYING_FILE=${basedir}/COPYING" />
            <arg value="${nsis.argument.prefix}DVERSION_FILE=${basedir}/VERSION" />
			<arg value="${build.resources}/windows/windows-setup.nsi"/>
        </exec>
	</target>		
    
    <!-- Linux (just a compressed tarball) -->
    <target name="release-tar" depends="sign, bundle-tar" />
    
    <target name="bundle-tar" depends="build-init">
        <tar destfile="${build}/${jhv.pkg.name}.bin.tar.gz" compression="gzip" >
        	<zipfileset dir="." includes="JHelioviewer.jar, README, COPYING, VERSION" prefix="${jhv.pkg.name}" />
        </tar>
    </target>
    
    <!-- Source bundle -->

    <target name="bundle-src" depends ="bundle-src-zip, bundle-src-tar" />

    <target name="bundle-src-prepare" depends="build-init">
        <mkdir dir="bin/build" />
        <javac destdir="${bin}/build/" srcdir="${build.resources}/shared/" includes="**/ManifestGenerator.java" />
        <taskdef name="generateManifest" classname="ManifestGenerator">
            <classpath location="${bin}/build/"/>
        </taskdef>
        <mkdir dir="${temp}/build/src" />
        <delete file="${temp}/build/src/bzrstatus" />
        <exec executable="${bzrpath}" output="${temp}/build/src/bzrstatus" resolveexecutable="true" searchpath="true">
            <arg value="status"/>
            <arg value="-S"/>
            <arg value="-r"/>
            <arg value="0"/>
        </exec>
        <delete file="${temp}/build/src/bzrfiles" />
        <generateManifest input="${temp}/build/src/bzrstatus" output="${temp}/build/src/bzrfiles" />
        <loadfile property="jhv.files" srcFile="${temp}/build/src/bzrfiles" />
    </target>
    
    <target name="bundle-src-tar" depends="bundle-src-prepare">
        <tar destfile="${build}/${jhv.pkg.name}.src.tar.gz" compression="gzip" defaultexcludes="no" longfile="gnu">
            <zipfileset dir="." includes="${jhv.files}" prefix="${jhv.pkg.name}-src/" defaultexcludes="no"/>
        </tar>
    </target>

    <target name="bundle-src-zip" depends="bundle-src-prepare">
        <zip destfile="${build}/${jhv.pkg.name}.src.zip" defaultexcludes="no" >
            <zipfileset dir="." includes="${jhv.files}" defaultexcludes="no" prefix="${jhv.pkg.name}-src/"/>
        </zip>
    </target>
       
    <!-- all -->
    <target name="release-all" depends="release-no-src, bundle-src" />
    <target name="release-no-src" depends="release-mac, release-windows, release-tar" />
    
    <target name="bundle-all" depends="bundle-no-src, bundle-src" />
    <target name="bundle-no-src" depends="bundle-mac, bundle-windows, bundle-tar" />
    
    <!-- documentation -->
    
    <target name="doc">
        <javadoc 
            access="private"
            destdir="${doc}"
            author="true"
            version="true"
            use="true"
            windowtitle="JHelioviewer API"
            sourcepath="${src.path}"
            linksource="true"
        >
            <classpath>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
			</classpath>
        </javadoc>
    </target>
    
    <!-- plugins -->
    <target name="release-plugins" >
    	<ant antfile="plugins/build.xml" inheritAll="false" target="all"/>
    </target>
    
    <target name="doc-plugins" >
    	<ant antfile="plugins/build.xml" inheritAll="false" target="doc"/>
    </target>

    <target name="clean-plugins" >
    	<ant antfile="plugins/build.xml" inheritAll="false" target="clean"/>
    </target>
    
    <target name="install-plugins" >
    	<ant antfile="plugins/build.xml" inheritAll="false" target="install-plugins"/>
    </target>
</project>
